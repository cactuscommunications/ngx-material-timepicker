{"ast":null,"code":"import { ElementRef, EventEmitter, SimpleChanges } from '@angular/core';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../../pipes/active-hour.pipe\";\nimport * as i3 from \"../../pipes/time-localizer.pipe\";\nimport * as i4 from \"../../pipes/active-minute.pipe\";\nimport * as i5 from \"../../pipes/minutes-formatter.pipe\";\nconst _c0 = [\"clockFace\"];\nconst _c1 = [\"clockHand\"];\n\nconst _c2 = function (a0) {\n  return {\n    \"transform\": a0\n  };\n};\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"active\": a0,\n    \"disabled\": a1\n  };\n};\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"span\", 10);\n    i0.ɵɵpipe(2, \"activeHour\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const time_r7 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(11, _c2, \"rotateZ(\" + time_r7.angle + \"deg) translateX(-50%)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(13, _c2, \"rotateZ(-\" + time_r7.angle + \"deg)\"))(\"ngClass\", i0.ɵɵpureFunction2(15, _c3, i0.ɵɵpipeBind3(2, 4, time_r7.time, ctx_r5.selectedTime.time, ctx_r5.isClockFaceDisabled), time_r7.disabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 8, time_r7.time, ctx_r5.timeUnit.HOUR), \" \");\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"span\", 10);\n    i0.ɵɵpipe(2, \"activeHour\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const time_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"height\", ctx_r8.innerClockFaceSize, \"px\");\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(13, _c2, \"rotateZ(\" + time_r9.angle + \"deg) translateX(-50%)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(15, _c2, \"rotateZ(-\" + time_r9.angle + \"deg)\"))(\"ngClass\", i0.ɵɵpureFunction2(17, _c3, i0.ɵɵpipeBind3(2, 6, time_r9.time, ctx_r8.selectedTime == null ? null : ctx_r8.selectedTime.time, ctx_r8.isClockFaceDisabled), time_r9.disabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 10, time_r9.time, ctx_r8.timeUnit.HOUR), \"\");\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerFaceComponent_div_2_div_3_div_1_Template, 5, 20, \"div\", 12);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"top\", \"calc(50% - \" + ctx_r6.innerClockFaceSize + \"px)\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 4, ctx_r6.faceTime, 12, 24))(\"ngForTrackBy\", ctx_r6.trackByTime);\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerFaceComponent_div_2_div_1_Template, 5, 18, \"div\", 7);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵtemplate(3, NgxMaterialTimepickerFaceComponent_div_2_div_3_Template, 3, 8, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 3, ctx_r1.faceTime, 0, 12))(\"ngForTrackBy\", ctx_r1.trackByTime);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.faceTime.length > 12);\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_ng_template_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"span\", 10);\n    i0.ɵɵpipe(2, \"activeMinute\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵpipe(5, \"minutesFormatter\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const time_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(15, _c2, \"rotateZ(\" + time_r11.angle + \"deg) translateX(-50%)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(17, _c2, \"rotateZ(-\" + time_r11.angle + \"deg)\"))(\"ngClass\", i0.ɵɵpureFunction2(19, _c3, i0.ɵɵpipeBind4(2, 4, time_r11.time, ctx_r10.selectedTime == null ? null : ctx_r10.selectedTime.time, ctx_r10.minutesGap, ctx_r10.isClockFaceDisabled), time_r11.disabled));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 9, i0.ɵɵpipeBind2(5, 12, time_r11.time, ctx_r10.minutesGap), ctx_r10.timeUnit.MINUTE), \"\");\n  }\n}\n\nfunction NgxMaterialTimepickerFaceComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtemplate(1, NgxMaterialTimepickerFaceComponent_ng_template_5_div_1_Template, 6, 22, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.faceTime)(\"ngForTrackBy\", ctx_r4.trackByTime);\n  }\n}\n\nconst _c4 = function (a0) {\n  return {\n    \"clock-face__clock-hand_minute\": a0\n  };\n};\n\nconst CLOCK_HAND_STYLES = {\n  small: {\n    height: '75px',\n    top: 'calc(50% - 75px)'\n  },\n  large: {\n    height: '103px',\n    top: 'calc(50% - 103px)'\n  }\n};\nexport let NgxMaterialTimepickerFaceComponent = /*#__PURE__*/(() => {\n  class NgxMaterialTimepickerFaceComponent {\n    constructor() {\n      this.timeUnit = TimeUnit;\n      this.innerClockFaceSize = 85;\n      this.timeChange = new EventEmitter();\n      this.timeSelected = new EventEmitter();\n    }\n\n    ngAfterViewInit() {\n      this.setClockHandPosition();\n      this.addTouchEvents();\n    }\n\n    ngOnChanges(changes) {\n      const faceTimeChanges = changes['faceTime'];\n      const selectedTimeChanges = changes['selectedTime'];\n\n      if (faceTimeChanges && faceTimeChanges.currentValue && selectedTimeChanges && selectedTimeChanges.currentValue) {\n        /* Set time according to passed an input value */\n        this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n      }\n\n      if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n        this.setClockHandPosition();\n      }\n\n      if (faceTimeChanges && faceTimeChanges.currentValue) {\n        // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n        setTimeout(() => this.selectAvailableTime());\n      }\n    }\n\n    trackByTime(_, time) {\n      return time.time;\n    }\n\n    onMousedown(e) {\n      e.preventDefault();\n      this.isStarted = true;\n    }\n\n    selectTime(e) {\n      if (!this.isStarted && e instanceof MouseEvent && e.type !== 'click') {\n        return;\n      }\n\n      const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n      /* Get x0 and y0 of the circle */\n\n      const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n      const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n      /* Counting the arctangent and convert it to from radian to deg */\n\n      const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n      /* Get angle according to quadrant */\n\n      const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n      /* Check if selected time from the inner clock face (24 hours format only) */\n\n      const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n      /* Round angle according to angle step */\n\n      const angleStep = this.unit === TimeUnit.MINUTE ? 6 * (this.minutesGap || 1) : 30;\n      const roundedAngle = roundAngle(circleAngle, angleStep);\n      const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n      const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n      if (selectedTime && !selectedTime.disabled) {\n        this.timeChange.next(selectedTime);\n        /* To let know whether user ended interaction with clock face */\n\n        if (!this.isStarted) {\n          this.timeSelected.next(selectedTime.time);\n        }\n      }\n    }\n\n    onMouseup(e) {\n      e.preventDefault();\n      this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n      this.removeTouchEvents();\n    }\n\n    addTouchEvents() {\n      this.touchStartHandler = this.onMousedown.bind(this);\n      this.touchEndHandler = this.onMouseup.bind(this);\n      this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n      this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    removeTouchEvents() {\n      this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n      this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    setClockHandPosition() {\n      if (this.format === 24) {\n        if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n          this.decreaseClockHand();\n        } else {\n          this.increaseClockHand();\n        }\n      }\n\n      this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    selectAvailableTime() {\n      const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n      this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n      if (currentTime && currentTime.disabled && !this.isClockFaceDisabled) {\n        const availableTime = this.faceTime.find(time => !time.disabled);\n        this.timeChange.next(availableTime);\n      }\n    }\n\n    isInnerClockFace(x0, y0, x, y) {\n      /* Detect whether time from the inner clock face or not (24 format only) */\n      return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    decreaseClockHand() {\n      this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n      this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    increaseClockHand() {\n      this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n      this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n\n  }\n\n  NgxMaterialTimepickerFaceComponent.ɵfac = function NgxMaterialTimepickerFaceComponent_Factory(t) {\n    return new (t || NgxMaterialTimepickerFaceComponent)();\n  };\n\n  NgxMaterialTimepickerFaceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NgxMaterialTimepickerFaceComponent,\n    selectors: [[\"ngx-material-timepicker-face\"]],\n    viewQuery: function NgxMaterialTimepickerFaceComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockFace = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockHand = _t.first);\n      }\n    },\n    hostBindings: function NgxMaterialTimepickerFaceComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousedown\", function NgxMaterialTimepickerFaceComponent_mousedown_HostBindingHandler($event) {\n          return ctx.onMousedown($event);\n        })(\"click\", function NgxMaterialTimepickerFaceComponent_click_HostBindingHandler($event) {\n          return ctx.selectTime($event);\n        })(\"touchmove\", function NgxMaterialTimepickerFaceComponent_touchmove_HostBindingHandler($event) {\n          return ctx.selectTime($event.changedTouches[0]);\n        })(\"touchend\", function NgxMaterialTimepickerFaceComponent_touchend_HostBindingHandler($event) {\n          return ctx.selectTime($event.changedTouches[0]);\n        })(\"mousemove\", function NgxMaterialTimepickerFaceComponent_mousemove_HostBindingHandler($event) {\n          return ctx.selectTime($event);\n        })(\"mouseup\", function NgxMaterialTimepickerFaceComponent_mouseup_HostBindingHandler($event) {\n          return ctx.onMouseup($event);\n        });\n      }\n    },\n    inputs: {\n      faceTime: \"faceTime\",\n      selectedTime: \"selectedTime\",\n      unit: \"unit\",\n      format: \"format\",\n      minutesGap: \"minutesGap\"\n    },\n    outputs: {\n      timeChange: \"timeChange\",\n      timeSelected: \"timeSelected\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 6,\n    consts: [[1, \"clock-face\"], [\"clockFace\", \"\"], [\"class\", \"clock-face__container\", 4, \"ngIf\", \"ngIfElse\"], [1, \"clock-face__clock-hand\", 3, \"ngClass\", \"hidden\"], [\"clockHand\", \"\"], [\"minutesFace\", \"\"], [1, \"clock-face__container\"], [\"class\", \"clock-face__number clock-face__number--outer\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"clock-face__inner\", 3, \"top\", 4, \"ngIf\"], [1, \"clock-face__number\", \"clock-face__number--outer\", 3, \"ngStyle\"], [3, \"ngStyle\", \"ngClass\"], [1, \"clock-face__inner\"], [\"class\", \"clock-face__number clock-face__number--inner\", 3, \"ngStyle\", \"height\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"clock-face__number\", \"clock-face__number--inner\", 3, \"ngStyle\"]],\n    template: function NgxMaterialTimepickerFaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, NgxMaterialTimepickerFaceComponent_div_2_Template, 4, 7, \"div\", 2);\n        i0.ɵɵelement(3, \"span\", 3, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, NgxMaterialTimepickerFaceComponent_ng_template_5_Template, 2, 2, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r3 = i0.ɵɵreference(6);\n\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.unit !== ctx.timeUnit.MINUTE)(\"ngIfElse\", _r3);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c4, ctx.unit === ctx.timeUnit.MINUTE))(\"hidden\", ctx.isClockFaceDisabled);\n      }\n    },\n    directives: [i1.NgIf, i1.NgForOf, i1.NgStyle, i1.NgClass],\n    pipes: [i1.SlicePipe, i2.ActiveHourPipe, i3.TimeLocalizerPipe, i4.ActiveMinutePipe, i5.MinutesFormatterPipe],\n    styles: [\".clock-face[_ngcontent-%COMP%]{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;padding:20px;box-sizing:border-box;background-color:#f0f0f0}@supports (background-color: var(--clock-face-background-color)){.clock-face[_ngcontent-%COMP%]{background-color:var(--clock-face-background-color)}}.clock-face__inner[_ngcontent-%COMP%]{position:absolute}.clock-face__container[_ngcontent-%COMP%]{margin-left:-2px}.clock-face__number[_ngcontent-%COMP%]{position:absolute;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer[_ngcontent-%COMP%]{height:125px}.clock-face__number--outer[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:16px;color:#6c6c6c}@supports (color: var(--clock-face-time-inactive-color)){.clock-face__number--outer[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{color:var(--clock-face-time-inactive-color)}}.clock-face__number--inner[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:14px;color:#929292}@supports (color: var(--clock-face-inner-time-inactive-color)){.clock-face__number--inner[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{color:var(--clock-face-inner-time-inactive-color)}}.clock-face__number[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{-webkit-user-select:none;-moz-user-select:none;user-select:none;width:30px;height:30px;display:flex;justify-content:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}@supports (font-family: var(--primary-font-family)){.clock-face__number[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-family:var(--primary-font-family)}}.clock-face__number[_ngcontent-%COMP%] > span.active[_ngcontent-%COMP%]{background-color:#00bfff;color:#fff}@supports (background-color: var(--clock-hand-color)){.clock-face__number[_ngcontent-%COMP%] > span.active[_ngcontent-%COMP%]{background-color:var(--clock-hand-color);color:var(--clock-face-time-active-color)}}.clock-face__number[_ngcontent-%COMP%] > span.disabled[_ngcontent-%COMP%]{color:#c5c5c5}@supports (color: var(--clock-face-time-disabled-color)){.clock-face__number[_ngcontent-%COMP%] > span.disabled[_ngcontent-%COMP%]{color:var(--clock-face-time-disabled-color)}}.clock-face__clock-hand[_ngcontent-%COMP%]{height:103px;width:2px;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1;background-color:#00bfff}@supports (background-color: var(--clock-hand-color)){.clock-face__clock-hand[_ngcontent-%COMP%]{background-color:var(--clock-hand-color)}}.clock-face__clock-hand[_ngcontent-%COMP%]:after{content:\\\"\\\";width:7px;height:7px;border-radius:50%;background-color:inherit;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute[_ngcontent-%COMP%]:before{content:\\\"\\\";width:7px;height:7px;background-color:#fff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);box-sizing:content-box;border-width:4px;border-style:solid;border-color:#00bfff}@supports (border-color: var(--clock-hand-color)){.clock-face__clock-hand_minute[_ngcontent-%COMP%]:before{border-color:var(--clock-hand-color)}}@media (max-device-width: 1023px) and (orientation: landscape){.clock-face[_ngcontent-%COMP%]{width:225px;height:225px;padding:5px}.clock-face__number--outer[_ngcontent-%COMP%]{height:107.5px}.clock-face__clock-hand_minute[_ngcontent-%COMP%]:before{top:0}}\"],\n    changeDetection: 0\n  });\n  return NgxMaterialTimepickerFaceComponent;\n})();\n\nfunction roundAngle(angle, step) {\n  return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\n  if (y > y0 && x >= x0) {\n    // II quarter\n    return 180 - currentAngle;\n  } else if (y > y0 && x < x0) {\n    // III quarter\n    return 180 + currentAngle;\n  } else if (y < y0 && x < x0) {\n    // IV quarter\n    return 360 - currentAngle;\n  } else {\n    // I quarter\n    return currentAngle;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}