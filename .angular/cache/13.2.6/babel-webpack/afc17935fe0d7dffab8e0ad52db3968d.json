{"ast":null,"code":"import { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport * as i0 from \"@angular/core\";\nexport let TimeParserPipe = /*#__PURE__*/(() => {\n  class TimeParserPipe {\n    constructor(locale) {\n      this.locale = locale;\n      this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;\n    }\n\n    transform(time, timeUnit = TimeUnit.HOUR) {\n      if (time == null || time === '') {\n        return '';\n      }\n\n      if (!isNaN(+time)) {\n        return time;\n      }\n\n      if (timeUnit === TimeUnit.MINUTE) {\n        return this.parseTime(time, 'm', 'minute');\n      }\n\n      return this.parseTime(time, 'H', 'hour');\n    }\n\n    parseTime(time, format, timeMeasure) {\n      const parsedTime = DateTime.fromFormat(String(time), format, {\n        numberingSystem: this.numberingSystem\n      })[timeMeasure];\n\n      if (!isNaN(parsedTime)) {\n        return parsedTime;\n      }\n\n      throw new Error(`Cannot parse time - ${time}`);\n    }\n\n  }\n\n  TimeParserPipe.ɵfac = function TimeParserPipe_Factory(t) {\n    return new (t || TimeParserPipe)(i0.ɵɵdirectiveInject(TIME_LOCALE, 16));\n  };\n\n  TimeParserPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"timeParser\",\n    type: TimeParserPipe,\n    pure: true\n  });\n  TimeParserPipe.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TimeParserPipe,\n    factory: TimeParserPipe.ɵfac\n  });\n  return TimeParserPipe;\n})();","map":null,"metadata":{},"sourceType":"module"}