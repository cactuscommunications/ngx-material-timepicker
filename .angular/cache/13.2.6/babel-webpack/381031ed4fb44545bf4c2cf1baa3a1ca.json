{"ast":null,"code":"import { ElementRef, Renderer2 } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let AppendToInputDirective = /*#__PURE__*/(() => {\n  class AppendToInputDirective {\n    constructor(elementRef, renderer) {\n      this.renderer = renderer;\n      this.element = elementRef.nativeElement;\n    }\n\n    get inputCords() {\n      return this.inputElement.getBoundingClientRect();\n    }\n\n    get direction() {\n      const height = this.element.offsetHeight;\n      const {\n        bottom,\n        top\n      } = this._inputCords;\n      const isElementFit = (window && window.innerHeight) - bottom < height;\n      const isTop = isElementFit && top > height;\n      const isCenter = isElementFit && top < height;\n\n      if (isTop) {\n        return 'top';\n      } else if (isCenter) {\n        return 'center';\n      }\n\n      return 'bottom';\n    }\n\n    ngAfterViewInit() {\n      this._inputCords = this.inputCords;\n      this._direction = this.direction;\n      this.append();\n    }\n\n    changePosition() {\n      const {\n        bottom,\n        top\n      } = this.inputCords;\n      const y = this.defineElementYByDirection(top, bottom);\n      this.setStyle('top', `${y}px`);\n    }\n\n    append() {\n      const {\n        left,\n        bottom,\n        top\n      } = this._inputCords;\n      const y = this.defineElementYByDirection(top, bottom);\n      this.setStyle('position', 'fixed');\n      this.setStyle('left', `${left}px`);\n      this.setStyle('top', `${y}px`);\n    }\n\n    setStyle(style, value) {\n      this.renderer.setStyle(this.element, style, value);\n    }\n\n    defineElementYByDirection(inputTop, inputBottom) {\n      if (this._direction === 'top') {\n        return inputTop - this.element.offsetHeight;\n      } else if (this._direction === 'center') {\n        return inputTop - this.element.offsetHeight / 2;\n      }\n\n      return inputBottom;\n    }\n\n  }\n\n  AppendToInputDirective.ɵfac = function AppendToInputDirective_Factory(t) {\n    return new (t || AppendToInputDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  AppendToInputDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AppendToInputDirective,\n    selectors: [[\"\", \"ngxAppendToInput\", \"\"]],\n    hostBindings: function AppendToInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"scroll\", function AppendToInputDirective_scroll_HostBindingHandler() {\n          return ctx.changePosition();\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      inputElement: [\"ngxAppendToInput\", \"inputElement\"]\n    }\n  });\n  return AppendToInputDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}