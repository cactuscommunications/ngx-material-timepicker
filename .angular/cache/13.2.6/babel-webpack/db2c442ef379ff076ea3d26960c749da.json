{"ast":null,"code":"import { EventEmitter, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport { NgxMaterialTimepickerContainerComponent } from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/ngx-material-timepicker-event.service\";\nimport * as i2 from \"./services/dom.service\";\nconst ESCAPE = 27;\nexport let NgxMaterialTimepickerComponent = /*#__PURE__*/(() => {\n  class NgxMaterialTimepickerComponent {\n    constructor(eventService, domService) {\n      this.eventService = eventService;\n      this.domService = domService;\n      this.timeUpdated = new Subject();\n      this.isEsc = true;\n      this.hoursOnly = false;\n      this.timeSet = new EventEmitter();\n      this.opened = new EventEmitter();\n      this.closed = new EventEmitter();\n      this.hourSelected = new EventEmitter();\n      this.timeChanged = new EventEmitter();\n      this.unsubscribe = new Subject();\n    }\n    /**\r\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\r\n     */\n\n\n    set ngxMaterialTimepickerTheme(theme) {\n      console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n      this._ngxMaterialTimepickerTheme = theme;\n    }\n\n    set format(value) {\n      this._format = value === 24 ? 24 : 12;\n    }\n\n    get format() {\n      return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    set minutesGap(gap) {\n      if (gap == null) {\n        return;\n      }\n\n      gap = Math.floor(gap);\n      this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap() {\n      return this._minutesGap;\n    }\n\n    get minTime() {\n      return this.timepickerInput ? this.timepickerInput.min : this.min;\n    }\n\n    get maxTime() {\n      return this.timepickerInput ? this.timepickerInput.max : this.max;\n    }\n\n    get disabled() {\n      return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time() {\n      return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    get inputElement() {\n      return this.timepickerInput && this.timepickerInput.element;\n    }\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\n\n\n    registerInput(input) {\n      if (this.timepickerInput) {\n        throw Error('A Timepicker can only be associated with a single input.');\n      }\n\n      this.timepickerInput = input;\n    }\n\n    open() {\n      this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n        timepickerBaseRef: this,\n        time: this.time,\n        defaultTime: this.defaultTime,\n        maxTime: this.maxTime,\n        minTime: this.minTime,\n        format: this.format,\n        minutesGap: this.minutesGap,\n        disableAnimation: this.disableAnimation,\n        cancelBtnTmpl: this.cancelBtnTmpl,\n        confirmBtnTmpl: this.confirmBtnTmpl,\n        editableHintTmpl: this.editableHintTmpl,\n        disabled: this.disabled,\n        enableKeyboardInput: this.enableKeyboardInput,\n        preventOverlayClick: this.preventOverlayClick,\n        appendToInput: this.appendToInput,\n        hoursOnly: this.hoursOnly,\n        theme: this.theme || this._ngxMaterialTimepickerTheme,\n        timepickerClass: this.timepickerClass,\n        inputElement: this.inputElement\n      });\n      this.opened.next();\n      this.subscribeToEvents();\n    }\n\n    close() {\n      this.domService.destroyTimepicker();\n      this.closed.next();\n      this.unsubscribeFromEvents();\n    }\n\n    updateTime(time) {\n      this.timeUpdated.next(time);\n    }\n\n    subscribeToEvents() {\n      merge(this.eventService.backdropClick, this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc))).pipe(takeUntil(this.unsubscribe)).subscribe(() => this.close());\n    }\n\n    unsubscribeFromEvents() {\n      this.unsubscribe.next();\n      this.unsubscribe.complete();\n    }\n\n  }\n\n  NgxMaterialTimepickerComponent.ɵfac = function NgxMaterialTimepickerComponent_Factory(t) {\n    return new (t || NgxMaterialTimepickerComponent)(i0.ɵɵdirectiveInject(i1.NgxMaterialTimepickerEventService), i0.ɵɵdirectiveInject(i2.DomService));\n  };\n\n  NgxMaterialTimepickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NgxMaterialTimepickerComponent,\n    selectors: [[\"ngx-material-timepicker\"]],\n    inputs: {\n      cancelBtnTmpl: \"cancelBtnTmpl\",\n      editableHintTmpl: \"editableHintTmpl\",\n      confirmBtnTmpl: \"confirmBtnTmpl\",\n      isEsc: [\"ESC\", \"isEsc\"],\n      enableKeyboardInput: \"enableKeyboardInput\",\n      preventOverlayClick: \"preventOverlayClick\",\n      disableAnimation: \"disableAnimation\",\n      appendToInput: \"appendToInput\",\n      hoursOnly: \"hoursOnly\",\n      defaultTime: \"defaultTime\",\n      timepickerClass: \"timepickerClass\",\n      theme: \"theme\",\n      min: \"min\",\n      max: \"max\",\n      ngxMaterialTimepickerTheme: \"ngxMaterialTimepickerTheme\",\n      format: \"format\",\n      minutesGap: \"minutesGap\"\n    },\n    outputs: {\n      timeSet: \"timeSet\",\n      opened: \"opened\",\n      closed: \"closed\",\n      hourSelected: \"hourSelected\",\n      timeChanged: \"timeChanged\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function NgxMaterialTimepickerComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return NgxMaterialTimepickerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}