{"ast":null,"code":"/* tslint:disable:triple-equals */\nimport { EventEmitter } from '@angular/core';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { isDigit } from '../../utils/timepicker.utils';\nimport { TimeParserPipe } from '../../pipes/time-parser.pipe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../pipes/time-parser.pipe\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../../directives/autofocus.directive\";\nimport * as i5 from \"../../pipes/time-localizer.pipe\";\n\nconst _c0 = function (a0) {\n  return {\n    \"timepicker-dial__item_active\": a0\n  };\n};\n\nfunction NgxMaterialTimepickerDialControlComponent_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxMaterialTimepickerDialControlComponent_input_0_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.time = $event;\n    })(\"input\", function NgxMaterialTimepickerDialControlComponent_input_0_Template_input_input_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateTime();\n    })(\"focus\", function NgxMaterialTimepickerDialControlComponent_input_0_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.saveTimeAndChangeTimeUnit($event, ctx_r6.timeUnit);\n    });\n    i0.ɵɵpipe(1, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r0.isActive))(\"ngModel\", i0.ɵɵpipeBind2(1, 4, ctx_r0.time, ctx_r0.timeUnit))(\"disabled\", ctx_r0.disabled)(\"timepickerAutofocus\", ctx_r0.isActive);\n  }\n}\n\nfunction NgxMaterialTimepickerDialControlComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxMaterialTimepickerDialControlComponent_ng_template_1_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onModelChange($event);\n    })(\"input\", function NgxMaterialTimepickerDialControlComponent_ng_template_1_Template_input_input_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.updateTime();\n    })(\"focus\", function NgxMaterialTimepickerDialControlComponent_ng_template_1_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.saveTimeAndChangeTimeUnit($event, ctx_r10.timeUnit);\n    })(\"keydown\", function NgxMaterialTimepickerDialControlComponent_ng_template_1_Template_input_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onKeydown($event);\n    })(\"keypress\", function NgxMaterialTimepickerDialControlComponent_ng_template_1_Template_input_keypress_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.changeTimeByKeyboard($event);\n    });\n    i0.ɵɵpipe(1, \"timeLocalizer\");\n    i0.ɵɵpipe(2, \"timeParser\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r2.isActive))(\"ngModel\", i0.ɵɵpipeBind3(1, 4, i0.ɵɵpipeBind2(2, 8, ctx_r2.time, ctx_r2.timeUnit), ctx_r2.timeUnit, true))(\"disabled\", ctx_r2.disabled)(\"timepickerAutofocus\", ctx_r2.isActive);\n  }\n}\n\nexport let NgxMaterialTimepickerDialControlComponent = /*#__PURE__*/(() => {\n  class NgxMaterialTimepickerDialControlComponent {\n    constructor(timeParserPipe) {\n      this.timeParserPipe = timeParserPipe;\n      this.timeUnitChanged = new EventEmitter();\n      this.timeChanged = new EventEmitter();\n      this.focused = new EventEmitter();\n      this.unfocused = new EventEmitter();\n    }\n\n    get selectedTime() {\n      if (!!this.time) {\n        return this.timeList.find(t => t.time === +this.time);\n      }\n    }\n\n    saveTimeAndChangeTimeUnit(event, unit) {\n      event.preventDefault();\n      this.previousTime = this.time;\n      this.timeUnitChanged.next(unit);\n      this.focused.next();\n    }\n\n    updateTime() {\n      const time = this.selectedTime;\n\n      if (time) {\n        this.timeChanged.next(time);\n        this.previousTime = time.time;\n      }\n    }\n\n    changeTimeByKeyboard(e) {\n      const char = String.fromCharCode(e.keyCode);\n\n      if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n        e.preventDefault();\n      }\n    }\n\n    onKeydown(e) {\n      if (!isDigit(e)) {\n        e.preventDefault();\n      } else {\n        this.changeTimeByArrow(e.keyCode);\n      }\n    }\n\n    onModelChange(value) {\n      this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    changeTimeByArrow(keyCode) {\n      const ARROW_UP = 38;\n      const ARROW_DOWN = 40;\n      let time;\n\n      if (keyCode === ARROW_UP) {\n        time = String(+this.time + (this.minutesGap || 1));\n      } else if (keyCode === ARROW_DOWN) {\n        time = String(+this.time - (this.minutesGap || 1));\n      }\n\n      if (!isTimeUnavailable(time, this.timeList)) {\n        this.time = time;\n        this.updateTime();\n      }\n    }\n\n  }\n\n  NgxMaterialTimepickerDialControlComponent.ɵfac = function NgxMaterialTimepickerDialControlComponent_Factory(t) {\n    return new (t || NgxMaterialTimepickerDialControlComponent)(i0.ɵɵdirectiveInject(i1.TimeParserPipe));\n  };\n\n  NgxMaterialTimepickerDialControlComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NgxMaterialTimepickerDialControlComponent,\n    selectors: [[\"ngx-material-timepicker-dial-control\"]],\n    inputs: {\n      timeList: \"timeList\",\n      timeUnit: \"timeUnit\",\n      time: \"time\",\n      isActive: \"isActive\",\n      isEditable: \"isEditable\",\n      minutesGap: \"minutesGap\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      timeUnitChanged: \"timeUnitChanged\",\n      timeChanged: \"timeChanged\",\n      focused: \"focused\",\n      unfocused: \"unfocused\"\n    },\n    features: [i0.ɵɵProvidersFeature([TimeParserPipe])],\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"timepicker-dial__control timepicker-dial__item\", \"readonly\", \"\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"timepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\", 4, \"ngIf\", \"ngIfElse\"], [\"editableTemplate\", \"\"], [\"readonly\", \"\", 1, \"timepicker-dial__control\", \"timepicker-dial__item\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"timepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\"], [1, \"timepicker-dial__control\", \"timepicker-dial__item\", \"timepicker-dial__control_editable\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"timepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\", \"keydown\", \"keypress\"]],\n    template: function NgxMaterialTimepickerDialControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NgxMaterialTimepickerDialControlComponent_input_0_Template, 2, 9, \"input\", 0);\n        i0.ɵɵtemplate(1, NgxMaterialTimepickerDialControlComponent_ng_template_1_Template, 3, 13, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n\n        i0.ɵɵproperty(\"ngIf\", !ctx.isEditable)(\"ngIfElse\", _r1);\n      }\n    },\n    directives: [i2.NgIf, i3.DefaultValueAccessor, i2.NgClass, i3.NgControlStatus, i3.NgModel, i4.AutofocusDirective],\n    pipes: [i5.TimeLocalizerPipe, i1.TimeParserPipe],\n    styles: [\".timepicker-dial__item[_ngcontent-%COMP%]{cursor:pointer;color:#ffffff80;font-family:Roboto,sans-serif}@supports (font-family: var(--primary-font-family)){.timepicker-dial__item[_ngcontent-%COMP%]{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__item_active[_ngcontent-%COMP%]{color:#fff}@supports (color: var(--dial-active-color)){.timepicker-dial__item_active[_ngcontent-%COMP%]{color:var(--dial-active-color)}}.timepicker-dial__control[_ngcontent-%COMP%]{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:right}.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{color:#00bfff;background-color:#fff;outline:deepskyblue}@supports (color: var(--dial-editable-active-color)){.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{color:var(--dial-editable-active-color)}}@supports (background-color: var(--dial-editable-background-color)){.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{background-color:var(--dial-editable-background-color)}}@supports (outline: var(--dial-editable-active-color)){.timepicker-dial__control_editable[_ngcontent-%COMP%]:focus{outline:var(--dial-editable-active-color)}}.timepicker-dial__control[_ngcontent-%COMP%]:disabled{cursor:default}\"]\n  });\n  return NgxMaterialTimepickerDialControlComponent;\n})();\n\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\n  const isNumber = /\\d/.test(nextTime);\n\n  if (isNumber) {\n    const time = currentTime + nextTime;\n    return isTimeUnavailable(time, timeList);\n  }\n}\n\nfunction isTimeUnavailable(time, timeList) {\n  const selectedTime = timeList.find(value => value.time === +time);\n  return !selectedTime || selectedTime && selectedTime.disabled;\n}","map":null,"metadata":{},"sourceType":"module"}