{"ast":null,"code":"import { DateTime } from 'luxon';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils'; // @dynamic\n\nexport let TimeAdapter = /*#__PURE__*/(() => {\n  class TimeAdapter {\n    static parseTime(time, opts) {\n      const {\n        numberingSystem,\n        locale\n      } = TimeAdapter.getLocaleOptionsByTime(time, opts);\n      const isPeriodExist = time.split(' ').length === 2;\n      const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n      return DateTime.fromFormat(time, timeMask, {\n        numberingSystem,\n        locale\n      });\n    }\n\n    static formatTime(time, opts) {\n      if (!time) {\n        return 'Invalid Time';\n      }\n\n      const {\n        format\n      } = opts;\n      const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n      if (format !== 24) {\n        return parsedTime.toLocaleString(Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), {\n          hour12: format !== 24,\n          numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n        })).replace(/\\u200E/g, '');\n      }\n\n      return parsedTime.toISOTime({\n        includeOffset: false,\n        suppressMilliseconds: true,\n        suppressSeconds: true\n      }).replace(/\\u200E/g, '');\n    }\n\n    static toLocaleTimeString(time, opts = {}) {\n      const {\n        format = TimeAdapter.DEFAULT_FORMAT,\n        locale = TimeAdapter.DEFAULT_LOCALE\n      } = opts;\n      const hourCycle = format === 24 ? 'h23' : 'h12';\n      const timeFormat = Object.assign(Object.assign({}, DateTime.TIME_SIMPLE), {\n        hourCycle\n      });\n      const timeMask = format === 24 ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n      return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(time, min, max, granularity, minutesGap, format) {\n      if (!time) {\n        return;\n      }\n\n      const convertedTime = this.parseTime(time, {\n        format\n      });\n      const minutes = convertedTime.minute;\n\n      if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n        throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n      }\n\n      const isAfter = min && !max && isSameOrAfter(convertedTime, min, granularity);\n      const isBefore = max && !min && isSameOrBefore(convertedTime, max, granularity);\n      const between = min && max && isBetween(convertedTime, min, max, granularity);\n      const isAvailable = !min && !max;\n      return isAfter || isBefore || between || isAvailable;\n    }\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\n\n\n    static formatHour(currentHour, format, period) {\n      if (format === 24) {\n        return currentHour;\n      }\n\n      const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n      if (period === TimePeriod.AM && hour === 12) {\n        return 0;\n      } else if (period === TimePeriod.PM && hour === 24) {\n        return 12;\n      }\n\n      return hour;\n    }\n\n    static fromDateTimeToString(time, format) {\n      const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n      return time.reconfigure({\n        numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n        locale: TimeAdapter.DEFAULT_LOCALE\n      }).toFormat(timeFormat);\n    }\n\n    static getLocaleOptionsByTime(time, opts) {\n      const {\n        numberingSystem,\n        locale\n      } = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n      const localeConfig = {\n        numberingSystem: numberingSystem,\n        locale\n      };\n      const defaultConfig = {\n        numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n        locale: TimeAdapter.DEFAULT_LOCALE\n      };\n      return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n\n  }\n\n  TimeAdapter.DEFAULT_FORMAT = 12;\n  TimeAdapter.DEFAULT_LOCALE = 'en-US';\n  TimeAdapter.DEFAULT_NUMBERING_SYSTEM = 'latn';\n  return TimeAdapter;\n})();","map":null,"metadata":{},"sourceType":"module"}