{"ast":null,"code":"import { ElementRef, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport * as i0 from \"@angular/core\";\nexport let TimepickerDirective = /*#__PURE__*/(() => {\n  class TimepickerDirective {\n    constructor(elementRef, locale) {\n      this.elementRef = elementRef;\n      this.locale = locale;\n      this._format = 12;\n      this._value = '';\n      this.timepickerSubscriptions = [];\n\n      this.onTouched = () => {};\n\n      this.onChange = () => {};\n    }\n\n    set format(value) {\n      this._format = value === 24 ? 24 : 12;\n      const isDynamicallyChanged = value && this.previousFormat && this.previousFormat !== this._format;\n\n      if (isDynamicallyChanged) {\n        this.value = this._value;\n\n        this._timepicker.updateTime(this._value);\n      }\n\n      this.previousFormat = this._format;\n    }\n\n    get format() {\n      return this._format;\n    }\n\n    set min(value) {\n      if (typeof value === 'string') {\n        this._min = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._min = value;\n    }\n\n    get min() {\n      return this._min;\n    }\n\n    set max(value) {\n      if (typeof value === 'string') {\n        this._max = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._max = value;\n    }\n\n    get max() {\n      return this._max;\n    }\n\n    set timepicker(picker) {\n      this.registerTimepicker(picker);\n    }\n\n    set value(value) {\n      if (!value) {\n        this._value = '';\n        this.updateInputValue();\n        return;\n      }\n\n      const time = TimeAdapter.formatTime(value, {\n        locale: this.locale,\n        format: this.format\n      });\n      const isAvailable = TimeAdapter.isTimeAvailable(time, this._min, this._max, 'minutes', this._timepicker.minutesGap, this._format);\n\n      if (isAvailable) {\n        this._value = time;\n        this.updateInputValue();\n        return;\n      }\n\n      console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value() {\n      if (!this._value) {\n        return '';\n      }\n\n      return TimeAdapter.toLocaleTimeString(this._value, {\n        format: this.format,\n        locale: this.locale\n      });\n    }\n\n    get element() {\n      return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    set defaultTime(time) {\n      this._timepicker.defaultTime = TimeAdapter.formatTime(time, {\n        locale: this.locale,\n        format: this.format\n      });\n    }\n\n    updateValue(value) {\n      this.value = value;\n      this.onChange(value);\n    }\n\n    ngOnChanges(changes) {\n      if (changes['value'] && changes['value'].currentValue) {\n        this.defaultTime = changes['value'].currentValue;\n      }\n    }\n\n    onClick(event) {\n      if (!this.disableClick) {\n        this._timepicker.open();\n\n        event.stopPropagation();\n      }\n    }\n\n    writeValue(value) {\n      this.value = value;\n\n      if (value) {\n        this.defaultTime = value;\n      }\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n      this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    registerTimepicker(picker) {\n      if (picker) {\n        this._timepicker = picker;\n\n        this._timepicker.registerInput(this);\n\n        this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe(time => {\n          this.value = time;\n          this.onChange(this.value);\n          this.onTouched();\n          this.defaultTime = this._value;\n        }));\n      } else {\n        throw new Error('NgxMaterialTimepickerComponent is not defined.' + ' Please make sure you passed the timepicker to ngxTimepicker directive');\n      }\n    }\n\n    updateInputValue() {\n      this.elementRef.nativeElement.value = this.value;\n    }\n\n  }\n\n  TimepickerDirective.ɵfac = function TimepickerDirective_Factory(t) {\n    return new (t || TimepickerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(TIME_LOCALE));\n  };\n\n  TimepickerDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: TimepickerDirective,\n    selectors: [[\"\", \"ngxTimepicker\", \"\"]],\n    hostVars: 1,\n    hostBindings: function TimepickerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"change\", function TimepickerDirective_change_HostBindingHandler($event) {\n          return ctx.updateValue($event.target.value);\n        })(\"blur\", function TimepickerDirective_blur_HostBindingHandler() {\n          return ctx.onTouched();\n        })(\"click\", function TimepickerDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      format: \"format\",\n      min: \"min\",\n      max: \"max\",\n      timepicker: [\"ngxTimepicker\", \"timepicker\"],\n      value: \"value\",\n      disabled: \"disabled\",\n      disableClick: \"disableClick\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: TimepickerDirective,\n      multi: true\n    }]), i0.ɵɵNgOnChangesFeature]\n  });\n  return TimepickerDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}