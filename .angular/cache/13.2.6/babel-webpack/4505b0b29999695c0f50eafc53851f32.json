{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\nimport * as i0 from \"@angular/core\";\nconst DEFAULT_HOUR = {\n  time: 12,\n  angle: 360\n};\nconst DEFAULT_MINUTE = {\n  time: 0,\n  angle: 360\n};\nexport let NgxMaterialTimepickerService = /*#__PURE__*/(() => {\n  class NgxMaterialTimepickerService {\n    constructor() {\n      this.hourSubject = new BehaviorSubject(DEFAULT_HOUR);\n      this.minuteSubject = new BehaviorSubject(DEFAULT_MINUTE);\n      this.periodSubject = new BehaviorSubject(TimePeriod.AM);\n    }\n\n    set hour(hour) {\n      this.hourSubject.next(hour);\n    }\n\n    get selectedHour() {\n      return this.hourSubject.asObservable();\n    }\n\n    set minute(minute) {\n      this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute() {\n      return this.minuteSubject.asObservable();\n    }\n\n    set period(period) {\n      const isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;\n\n      if (isPeriodValid) {\n        this.periodSubject.next(period);\n      }\n    }\n\n    get selectedPeriod() {\n      return this.periodSubject.asObservable();\n    }\n\n    setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\n      /* Workaround to double error message*/\n      try {\n        if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n          this.setDefaultTime(time, format);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    getFullTime(format) {\n      const selectedHour = this.hourSubject.getValue().time;\n      const selectedMinute = this.minuteSubject.getValue().time;\n      const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n      const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n      const period = format === 12 ? this.periodSubject.getValue() : '';\n      const time = `${hour}:${minute} ${period}`.trim();\n      return TimeAdapter.formatTime(time, {\n        format\n      });\n    }\n\n    setDefaultTime(time, format) {\n      const defaultTime = TimeAdapter.parseTime(time, {\n        format\n      }).toJSDate();\n\n      if (DateTime.fromJSDate(defaultTime).isValid) {\n        const period = time.substr(time.length - 2).toUpperCase();\n        const hour = defaultTime.getHours();\n        this.hour = Object.assign(Object.assign({}, DEFAULT_HOUR), {\n          time: formatHourByPeriod(hour, period)\n        });\n        this.minute = Object.assign(Object.assign({}, DEFAULT_MINUTE), {\n          time: defaultTime.getMinutes()\n        });\n        this.period = period;\n      } else {\n        this.resetTime();\n      }\n    }\n\n    resetTime() {\n      this.hour = Object.assign({}, DEFAULT_HOUR);\n      this.minute = Object.assign({}, DEFAULT_MINUTE);\n      this.period = TimePeriod.AM;\n    }\n\n  }\n\n  NgxMaterialTimepickerService.ɵfac = function NgxMaterialTimepickerService_Factory(t) {\n    return new (t || NgxMaterialTimepickerService)();\n  };\n\n  NgxMaterialTimepickerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NgxMaterialTimepickerService,\n    factory: NgxMaterialTimepickerService.ɵfac,\n    providedIn: 'root'\n  });\n  /***\r\n   *  Format hour in 24hours format to meridian (AM or PM) format\r\n   */\n\n  return NgxMaterialTimepickerService;\n})();\n\nfunction formatHourByPeriod(hour, period) {\n  switch (period) {\n    case TimePeriod.AM:\n      return hour === 0 ? 12 : hour;\n\n    case TimePeriod.PM:\n      return hour === 12 ? 12 : hour - 12;\n\n    default:\n      return hour;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}