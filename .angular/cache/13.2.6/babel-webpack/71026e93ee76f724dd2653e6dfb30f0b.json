{"ast":null,"code":"import { EventEmitter, TemplateRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Subject } from 'rxjs';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\nimport { distinctUntilChanged, map, takeUntil, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/ngx-material-timepicker.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./timepicker-time-control/ngx-timepicker-time-control.component\";\nimport * as i4 from \"./timepicker-period-selector/ngx-timepicker-period-selector.component\";\nimport * as i5 from \"../timepicker-toggle-button/ngx-material-timepicker-toggle.component\";\nimport * as i6 from \"../../directives/ngx-material-timepicker-toggle-icon.directive\";\nimport * as i7 from \"../../ngx-material-timepicker.component\";\n\nfunction NgxTimepickerFieldComponent_ngx_timepicker_period_selector_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngx-timepicker-period-selector\", 9);\n    i0.ɵɵlistener(\"periodSelected\", function NgxTimepickerFieldComponent_ngx_timepicker_period_selector_7_Template_ngx_timepicker_period_selector_periodSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.changePeriod($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectedPeriod\", ctx_r0.period)(\"disabled\", ctx_r0.disabled || ctx_r0.isChangePeriodDisabled);\n  }\n}\n\nfunction NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"ngx-timepicker__toggle--left\": a0\n  };\n};\n\nfunction NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-material-timepicker-toggle\", 10)(1, \"span\", 11);\n    i0.ɵɵtemplate(2, NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_ng_container_2_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(10);\n\n    const _r3 = i0.ɵɵreference(12);\n\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c0, ctx_r1.buttonAlign === \"left\"))(\"for\", _r2)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.toggleIcon || _r3);\n  }\n}\n\nfunction NgxTimepickerFieldComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 13);\n    i0.ɵɵelement(1, \"path\", 14);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"ngx-timepicker--disabled\": a0\n  };\n};\n\nexport let NgxTimepickerFieldComponent = /*#__PURE__*/(() => {\n  class NgxTimepickerFieldComponent {\n    constructor(timepickerService, locale) {\n      this.timepickerService = timepickerService;\n      this.locale = locale;\n      this.minHour = 1;\n      this.maxHour = 12;\n      this.timeUnit = TimeUnit;\n      this.buttonAlign = 'right';\n      this.timeChanged = new EventEmitter();\n      this._format = 12;\n      this.unsubscribe$ = new Subject();\n      this.isFirstTimeChange = true;\n\n      this.onChange = () => {};\n    }\n\n    set format(value) {\n      this._format = value === 24 ? 24 : 12;\n      this.minHour = this._format === 12 ? 1 : 0;\n      this.maxHour = this._format === 12 ? 12 : 23;\n      this.hoursList = TimepickerTimeUtils.getHours(this._format);\n      const isDynamicallyChanged = value && this.previousFormat && this.previousFormat !== this._format;\n\n      if (isDynamicallyChanged) {\n        this.updateTime(this.timepickerTime);\n      }\n\n      this.previousFormat = this._format;\n    }\n\n    get format() {\n      return this._format;\n    }\n\n    set min(value) {\n      if (typeof value === 'string') {\n        this._min = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._min = value;\n    }\n\n    get min() {\n      return this._min;\n    }\n\n    set max(value) {\n      if (typeof value === 'string') {\n        this._max = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._max = value;\n    }\n\n    get max() {\n      return this._max;\n    }\n\n    set defaultTime(val) {\n      this._defaultTime = val;\n      this.isDefaultTime = !!val;\n    }\n\n    get defaultTime() {\n      return this._defaultTime;\n    }\n\n    ngOnInit() {\n      this.initTime(this.defaultTime);\n      this.hoursList = TimepickerTimeUtils.getHours(this._format);\n      this.minutesList = TimepickerTimeUtils.getMinutes();\n      this.isTimeRangeSet = !!(this.min || this.max);\n      this.hour$ = this.timepickerService.selectedHour.pipe(tap(clockTime => this.selectedHour = clockTime.time), map(this.changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this.updateAvailableMinutes()));\n      this.minute$ = this.timepickerService.selectedMinute.pipe(map(this.changeDefaultTimeValue.bind(this)), tap(() => this.isFirstTimeChange = false));\n\n      if (this.format === 12) {\n        this.timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap(period => this.period = period), tap(period => this.isChangePeriodDisabled = this.isPeriodDisabled(period)), takeUntil(this.unsubscribe$)).subscribe(() => this.isTimeRangeSet && this.updateAvailableTime());\n      }\n    }\n\n    writeValue(val) {\n      if (val) {\n        this.initTime(val);\n      } else {\n        this.resetTime();\n      }\n    }\n\n    registerOnTouched(fn) {}\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    changeHour(hour) {\n      this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n      this.changeTime();\n    }\n\n    changeMinute(minute) {\n      this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n      this.changeTime();\n    }\n\n    changePeriod(period) {\n      this.timepickerService.period = period;\n      this.changeTime();\n    }\n\n    onTimeSet(time) {\n      this.updateTime(time);\n      this.emitLocalTimeChange(time);\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe$.next();\n      this.unsubscribe$.complete();\n    }\n\n    changeTime() {\n      const time = this.timepickerService.getFullTime(this.format);\n      this.timepickerTime = time;\n      this.emitLocalTimeChange(time);\n    }\n\n    resetTime() {\n      this.timepickerService.hour = {\n        angle: 0,\n        time: null\n      };\n      this.timepickerService.minute = {\n        angle: 0,\n        time: null\n      };\n    }\n\n    emitLocalTimeChange(time) {\n      const localTime = TimeAdapter.toLocaleTimeString(time, {\n        format: this.format,\n        locale: this.locale\n      });\n      this.onChange(localTime);\n      this.timeChanged.emit(localTime);\n    }\n\n    changeDefaultTimeValue(clockFaceTime) {\n      if (!this.isDefaultTime && this.isFirstTimeChange) {\n        return Object.assign(Object.assign({}, clockFaceTime), {\n          time: null\n        });\n      }\n\n      return clockFaceTime;\n    }\n\n    updateAvailableHours() {\n      this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n        min: this.min,\n        max: this.max,\n        format: this.format,\n        period: this.period\n      });\n    }\n\n    updateAvailableMinutes() {\n      this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\n        min: this.min,\n        max: this.max,\n        format: this.format,\n        period: this.period\n      });\n    }\n\n    updateAvailableTime() {\n      this.updateAvailableHours();\n\n      if (this.selectedHour) {\n        this.updateAvailableMinutes();\n      }\n    }\n\n    updateTime(time) {\n      if (time) {\n        const formattedTime = TimeAdapter.formatTime(time, {\n          locale: this.locale,\n          format: this.format\n        });\n        this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\n        this.timepickerTime = formattedTime;\n      }\n    }\n\n    initTime(time) {\n      const isDefaultTimeAvailable = TimeAdapter.isTimeAvailable(time, this.min, this.max, 'minutes', null, this.format);\n\n      if (!isDefaultTimeAvailable) {\n        if (this.min) {\n          this.updateTime(TimeAdapter.fromDateTimeToString(this.min, this.format));\n          return;\n        }\n\n        if (this.max) {\n          this.updateTime(TimeAdapter.fromDateTimeToString(this.max, this.format));\n          return;\n        }\n      }\n\n      this.updateTime(time);\n    }\n\n    isPeriodDisabled(period) {\n      return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\n        min: this.min,\n        max: this.max,\n        format: 12,\n        period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\n      }).every(time => time.disabled);\n    }\n\n  }\n\n  NgxTimepickerFieldComponent.ɵfac = function NgxTimepickerFieldComponent_Factory(t) {\n    return new (t || NgxTimepickerFieldComponent)(i0.ɵɵdirectiveInject(i1.NgxMaterialTimepickerService), i0.ɵɵdirectiveInject(TIME_LOCALE));\n  };\n\n  NgxTimepickerFieldComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NgxTimepickerFieldComponent,\n    selectors: [[\"ngx-timepicker-field\"]],\n    inputs: {\n      disabled: \"disabled\",\n      toggleIcon: \"toggleIcon\",\n      buttonAlign: \"buttonAlign\",\n      clockTheme: \"clockTheme\",\n      controlOnly: \"controlOnly\",\n      cancelBtnTmpl: \"cancelBtnTmpl\",\n      confirmBtnTmpl: \"confirmBtnTmpl\",\n      format: \"format\",\n      min: \"min\",\n      max: \"max\",\n      defaultTime: \"defaultTime\"\n    },\n    outputs: {\n      timeChanged: \"timeChanged\"\n    },\n    features: [i0.ɵɵProvidersFeature([NgxMaterialTimepickerService, {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: NgxTimepickerFieldComponent,\n      multi: true\n    }])],\n    decls: 13,\n    vars: 32,\n    consts: [[1, \"ngx-timepicker\", 3, \"ngClass\"], [1, \"ngx-timepicker__control--first\", 3, \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"timeChanged\"], [1, \"ngx-timepicker__time-colon\", \"ngx-timepicker__control--second\"], [1, \"ngx-timepicker__control--third\", 3, \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"timeChanged\"], [\"class\", \"ngx-timepicker__control--forth\", 3, \"selectedPeriod\", \"disabled\", \"periodSelected\", 4, \"ngIf\"], [\"class\", \"ngx-timepicker__toggle\", 3, \"ngClass\", \"for\", \"disabled\", 4, \"ngIf\"], [3, \"min\", \"max\", \"theme\", \"defaultTime\", \"format\", \"cancelBtnTmpl\", \"confirmBtnTmpl\", \"timeSet\"], [\"timepicker\", \"\"], [\"defaultIcon\", \"\"], [1, \"ngx-timepicker__control--forth\", 3, \"selectedPeriod\", \"disabled\", \"periodSelected\"], [1, \"ngx-timepicker__toggle\", 3, \"ngClass\", \"for\", \"disabled\"], [\"ngxMaterialTimepickerToggleIcon\", \"\"], [4, \"ngTemplateOutlet\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\"], [\"d\", \"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"]],\n    template: function NgxTimepickerFieldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"ngx-timepicker-time-control\", 1);\n        i0.ɵɵlistener(\"timeChanged\", function NgxTimepickerFieldComponent_Template_ngx_timepicker_time_control_timeChanged_1_listener($event) {\n          return ctx.changeHour($event);\n        });\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"span\", 2);\n        i0.ɵɵtext(4, \":\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"ngx-timepicker-time-control\", 3);\n        i0.ɵɵlistener(\"timeChanged\", function NgxTimepickerFieldComponent_Template_ngx_timepicker_time_control_timeChanged_5_listener($event) {\n          return ctx.changeMinute($event);\n        });\n        i0.ɵɵpipe(6, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, NgxTimepickerFieldComponent_ngx_timepicker_period_selector_7_Template, 1, 2, \"ngx-timepicker-period-selector\", 4);\n        i0.ɵɵtemplate(8, NgxTimepickerFieldComponent_ngx_material_timepicker_toggle_8_Template, 3, 6, \"ngx-material-timepicker-toggle\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ngx-material-timepicker\", 6, 7);\n        i0.ɵɵlistener(\"timeSet\", function NgxTimepickerFieldComponent_Template_ngx_material_timepicker_timeSet_9_listener($event) {\n          return ctx.onTimeSet($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, NgxTimepickerFieldComponent_ng_template_11_Template, 2, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        let tmp_2_0;\n        let tmp_10_0;\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(30, _c1, ctx.disabled));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"placeholder\", \"HH\")(\"time\", (tmp_2_0 = i0.ɵɵpipeBind1(2, 26, ctx.hour$)) == null ? null : tmp_2_0.time)(\"min\", ctx.minHour)(\"max\", ctx.maxHour)(\"timeUnit\", ctx.timeUnit.HOUR)(\"disabled\", ctx.disabled)(\"timeList\", ctx.hoursList)(\"preventTyping\", ctx.isTimeRangeSet);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"placeholder\", \"MM\")(\"time\", (tmp_10_0 = i0.ɵɵpipeBind1(6, 28, ctx.minute$)) == null ? null : tmp_10_0.time)(\"min\", 0)(\"max\", 59)(\"timeUnit\", ctx.timeUnit.MINUTE)(\"disabled\", ctx.disabled)(\"timeList\", ctx.minutesList)(\"preventTyping\", ctx.isTimeRangeSet);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.format !== 24);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.controlOnly);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"min\", ctx.min)(\"max\", ctx.max)(\"theme\", ctx.clockTheme)(\"defaultTime\", ctx.timepickerTime)(\"format\", ctx.format)(\"cancelBtnTmpl\", ctx.cancelBtnTmpl)(\"confirmBtnTmpl\", ctx.confirmBtnTmpl);\n      }\n    },\n    directives: [i2.NgClass, i3.NgxTimepickerTimeControlComponent, i2.NgIf, i4.NgxTimepickerPeriodSelectorComponent, i5.NgxMaterialTimepickerToggleComponent, i6.NgxMaterialTimepickerToggleIconDirective, i2.NgTemplateOutlet, i7.NgxMaterialTimepickerComponent],\n    pipes: [i2.AsyncPipe],\n    styles: [\".ngx-timepicker[_ngcontent-%COMP%]{display:flex;align-items:center;height:100%;border-bottom:1px solid rgba(0,0,0,.12)}.ngx-timepicker--disabled[_ngcontent-%COMP%]{background:rgba(0,0,0,.07);pointer-events:none}.ngx-timepicker__time-colon[_ngcontent-%COMP%]{margin-left:10px}.ngx-timepicker__control--first[_ngcontent-%COMP%]{order:1}.ngx-timepicker__control--second[_ngcontent-%COMP%]{order:2}.ngx-timepicker__control--third[_ngcontent-%COMP%]{order:3}.ngx-timepicker__control--forth[_ngcontent-%COMP%], .ngx-timepicker__toggle[_ngcontent-%COMP%]{order:4}.ngx-timepicker__toggle--left[_ngcontent-%COMP%]{order:0}\"],\n    changeDetection: 0\n  });\n  return NgxTimepickerFieldComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}